#!/bin/bash

export LIBVIRT_DEFAULT_URI=qemu:///system

err=0
ISO=${1:-$(readlink -f ${PWD}/work/sno.x86_64.iso)}
if [ ! -f "${ISO}" ]; then
    echo "Need ISO image as 1st argument"
    err=1
fi

if ! command -v virt-install >/dev/null; then
    echo "Need to install virtlib and friends:"
    echo "qemu qemu-kvm virt-manager libvirt bridge-utils virt-install"
    err=1
fi

if ! command -v yq >/dev/null; then
    echo "Need to install yq"
    err=1
fi

SNO=${CLUSTERNAME:-$(yq .sno.name < config.yaml)}
virsh dumpxml ${SNO} >/dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "VM ${SNO} already exists"
    err=1
fi

if [ ${err} -ne 0 ]; then
    exit ${err}
fi

ISO=$(readlink -f ${ISO})

# Check timestamp, it must be within 24 hours (24 * 60 * 60 = 86400)
ISOTS=$(stat -c%Y ${ISO})
ISOEXP=$((${ISOTS} + 86400))
NOW=$(date +%s)
if [ ${NOW} -gt ${ISOEXP} ]; then
    echo "ISO is out of date. Delete work directory, then run 'setup-sno'"
    exit 1
fi

# USERNAME=${USERNAME:-test}
# --unattended user-login=${USERNAME}\
# --disk size=32 \
# --noautoconsole \
# --graphics none \
# --unattended \
AUTOCONSOLE=${AUTOCONSOLE:-none}
GRAPHICS=none
if [ "${AUTOCONSOLE}" == "graphical" ]; then
    GRAPHICS=vnc
fi

virt-install --name ${SNO} \
             --description "${SNO} cluster" \
             --os-variant rhel8-unknown \
             --unattended \
             --autoconsole ${AUTOCONSOLE} \
             --ram=16384 \
             --vcpus=8 \
             --disk size=120 \
             --graphics ${GRAPHICS} \
             --cdrom "${ISO}" \
             --network bridge=virbr0

# We need to get the IP address!

echo "Looking for ${SNO} IP address"
while [ ${found} -eq 0 ]; do
    IP=$(virsh -q domifaddr ${SNO} --source arp 2>/dev/null | awk '{print $4}' | cut -d/ -f1)
    if [ $? -eq 0 -a -n "${IP}" ]; then
        break
    fi
    echo -n "."
    sleep 1
done
echo " "

D=${BASEDOMAIN:-$(yq .sno.domain < config.yaml)}
# Same as ${SNO}
C=${CLUSTERNAME:-$(yq .sno.name < config.yaml)}
T=$(mktemp)

cat > ${T} <<EOF
<host ip='${IP}'>
<hostname>api.$C.$D</hostname>
<hostname>api-int.$C.$D</hostname>
<hostname>oauth-openshift.apps.$C.$D</hostname>
<hostname>console-openshift-console.apps.$C.$D</hostname>
<hostname>grafana-openshift-monitoring.apps.$C.$D</hostname>
<hostname>thanos-querier-openshift-monitoring.apps.$C.$D</hostname>
<hostname>prometheus-k8s-openshift-monitoring.apps.$C.$D</hostname>
<hostname>alertmanager-main-openshift-monitoring.apps.$C.$D</hostname>
<hostname>canary-openshift-ingress-canary.apps.$C.$D</hostname>
</host>
EOF
virsh net-update --network default --command add --section dns-host --xml ${T}

echo "Waiting for ${SNO} to start..."
while true; do
    state=$(virsh domstate ${SNO} 2>/dev/null)
    if [ "${state}" == "running" ]; then
        break
    fi
    sleep 1
done
# Update /etc/hosts
echo "Need to update /etc/hosts (sudo may prompt for password)"
sudo tee -a /etc/hosts <<EOF
${IP} api.$C.$D ${SNO}
EOF
# Sometimes we get stuck here...
echo "Waiting for ${SNO} to complete initial install and shutdown..."
while true; do
    state=$(virsh domstate ${SNO} 2>/dev/null)
    if [ "${state}" == "" ]; then
        echo "VM ${SNO} not found"
        exit 1
    fi
    if [ "${state}" == "shut off" ]; then
        break
    fi
    sleep 1
done
echo "Restarting ${SNO} to start cluster..."
virsh start ${SNO}

echo "Waiting for cluster to come up"
# Copy to a more convenient place
cp $(pwd)/work/ocp/auth/kubeconfig ${KUBECNFIG} $(pwd)/work/kubeconfig
export KUBECONFIG=$(readlink -f ${PWD}work/kubeconfig)
while [ $found -eq 0 ]; do
    oc get clusterversion >/dev/null 2>&1
    if [ $? -eq 0 ]; then
        break
    else
        sleep 1
    fi
done
echo "KUBECONFIG=${KUBECONFIG}"
oc get clusterversion
